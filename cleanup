#!/bin/bash

usage() { echo "Usage: $0 <cluster-name>" 1>&2; exit 1; }

if [[ -z $1 ]]; then
  usage
  exit 1;
fi

CLUSTER_NAME=$1

# check if the cluster namespace exists
nsStatus=`kubectl get namespace ${CLUSTER_NAME} --no-headers --output=go-template={{.metadata.name}} 2>/dev/null`
if [ -z "${nsStatus}" ]; then
    echo "Cluster (${CLUSTER_NAME}) is not found, please specify an existing cluster"
    exit 1;
fi

# set current namespace
echo "set the current namespace:"
kubectl config set-context --current --namespace=${CLUSTER_NAME}

# delete the validator clients
echo "deleting validator clients."
eval "cat <<EOF
$(<./manifests/validators/vc0-teku.yaml)
EOF
" | kubectl delete -f -
eval "cat <<EOF
$(<./manifests/validators/vc1-teku.yaml)
EOF
" | kubectl delete -f -
eval "cat <<EOF
$(<./manifests/validators/vc2-teku.yaml)
EOF
" | kubectl delete -f -

# delete charon nodes
echo "deleting charon nodes."
eval "cat <<EOF
$(<./manifests/charon-nodes/node0.yaml)
EOF
" | kubectl delete -f -
eval "cat <<EOF
$(<./manifests/charon-nodes/node1.yaml)
EOF
" | kubectl delete -f -
eval "cat <<EOF
$(<./manifests/charon-nodes/node2.yaml)
EOF
" | kubectl delete -f -

# delete charon bootnode
echo "deleting charon bootnode."
eval "cat <<EOF
$(<./manifests/charon-bootnode/bootnode.yaml)
EOF
" | kubectl delete -f -

# delete charon volume
echo "deleting shared volume."
eval "cat <<EOF
$(<./manifests/shared-pv/shared-pv.yaml)
EOF
" | kubectl delete -f -

# delete current namespace
echo "deleting namespace."
kubectl delete ns ${CLUSTER_NAME}
